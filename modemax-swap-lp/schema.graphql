type PairCreated @entity(immutable: true) {
  id: Bytes!
  token0: Bytes! # address
  token1: Bytes! # address
  pair: Bytes! # address
  param3: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type Token @entity {
  id: ID!
  name: String!
  symbol: String!
  decimals: Int!
  derivedUSD: BigDecimal!
  price: TokenPrice
}

type Pair @entity {
  id: ID!
  token0: Token!
  token1: Token!
  reserve0: BigDecimal!
  reserve1: BigDecimal!
  totalSupply: BigDecimal!

  reserveUSD: BigDecimal!
  fee: PairFee
  swap: PairSwap
}

type UserLiquidity @entity {
  # account
  id: ID!
  lps: [BigDecimal!]!
  pairs: [String!]!
  derivedUSDs: [BigDecimal!]!
  # lpUSD * timestamp + <prev>
  basePoints: BigDecimal!
  latestUpdateTimestamp: Int!
  snap: [UserLiquiditySnap!] @derivedFrom(field: "account")
}

type UserLiquiditySnap @entity(immutable: true) {
  # account:timestamp
  id: ID!
  account: UserLiquidity!
  timestamp: Int!
  lps: [BigDecimal!]!
  pairs: [String!]!
  derivedUSDs: [BigDecimal!]!
  basePoints: BigDecimal!
}

type UserSwap @entity {
  # account
  id: ID!
  swap: BigDecimal!
  swapUSD: BigDecimal!
  latestUpdateTimestamp: Int!
  snap: [UserSwapSnap!] @derivedFrom(field: "account")
}

type UserSwapSnap @entity(immutable: true) {
  # account:timestamp
  id: ID!
  account: UserSwap!
  timestamp: Int!
  swap: BigDecimal!
  swapUSD: BigDecimal!
}

type TokenPrice @entity {
  id: ID!
  priceUSD: BigDecimal!
}

type PairFee @entity {
  # pair address
  id: ID!
  feeUsd: BigDecimal!
  latestUpdateTimestamp: Int!
  snap: [PairFeeSnap!] @derivedFrom(field: "pair")
}

type PairFeeSnap @entity(immutable: true) {
  id: ID!
  pair: PairFee!
  feeUsd: BigDecimal!
  # hourStartUnix
  timestamp: Int!
}

type PairSwap @entity {
  id: ID!
  swapUsd: BigDecimal!
  latestUpdateTimestamp: Int!
  snap: [PairSwapSnap!] @derivedFrom(field: "pair")
}

type PairSwapSnap @entity(immutable: true) {
  id: ID!
  pair: PairSwap!
  swapUsd: BigDecimal!
  # hourStartUnix
  timestamp: Int!
}